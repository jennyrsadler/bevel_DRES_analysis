qplot(x=BMIcat , y=BMI , data=df , geom=c("boxplot","jitter") , fill=BMIcat)
p <- ggplot(df, aes(x=reorder(DREScat,BMI, FUN = median), y=BMI, fill=DREScat))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) +xlab("Dietary Restraint Groups") +
ylab("Body Mass Index") + theme_bw(base_size = 14) + scale_fill_discrete(name="Dietary Restraint Groups"))
clear
p <- ggplot(df, aes(x=reorder(DREScat,BMI, FUN = median), y=BMI, fill=DREScat))
library(readxl)
library(ggplot2)
library(psych)
library(table1)
#import data file
df1 <- read.csv("/Users/jennygilbert/Documents/bevel_DRES_analysis/data/deid_bevel.csv")
library(readxl)
library(ggplot2)
library(psych)
library(table1)
#import data file
df1 <- read.csv("/Users/jennygilbert/Documents/bevel_DRES_analysis/data/deid_bevel.csv")
quantile(df1$DRES, c(.33, .66))
attach(df1)
df1$DREScat[DRES > 2.5] <- "high_restraint"
df1$DREScat[DRES > 1.837 & DRES <= 2.5] <- "mid_restraint"
df1$DREScat[DRES <= 1.837] <- "low_restraint"
detach(df1)
print(df1$DREScat)
df <- df1[ which(df1$DREScat=='high_restraint' | df1$DREScat =="low_restraint"), ]
print(df$ID)
df$DREScat <-
factor(df$DREScat, levels=c('high_restraint','low_restraint'),
labels=c("High Dietary Restraint",
"Low Dietary Restratint"))
df$test_result_group <-
factor(df$test_result_group, levels=c('learner','nonlearner','punish_learner','reward_learner'),
labels=c("Choose Reward and Avoid Punishment", "No Learning", "Avoid Punishment",
"Choose Reward"))
df$sweetstim_level <-
factor(df$sweetstim_level, levels=c('1','2','3','4'),
labels=c("14", "21", "28",
"35"))
df$bitterstim_level <-
factor(df$bitterstim_level, levels=c('1','2','3','4'),
labels=c("12", "24", "48",
"72"))
label(df$sex) <- "Sex"
label(df$BMI) <- "Body Mass Index"
label(df$age) <- "Age"
label(df$DRES) <- "DEBQ: Restratint"
label(df$external_eating) <- "DEBQ: External Eating"
label(df$emotional_eating) <- "DEBQ: Emotional Eating"
label(df$PORTIONS_SSB) <- "Self-Reported Daily SSB Intake"
label(df$TOTAL_KCAL) <- "Self-Reported Daily Intake"
label(df$nback_accuracy) <- "N-Back Accuracy"
label(df$sweetstim_level) <- "Sweetness of Selected Reward"
label(df$sweetstim_pleasent) <- "Plesantness Rating of Selected Reward"
label(df$bitterstim_level) <- "Bitterness of Selected Punishment"
label(df$bitterstim_pleasent) <- "Plesantness Rating of Selected Punishment"
label(df$PSTtraining_._correct) <- "Accuracy during PST Training"
label(df$test_result_group) <- "Reinforcer Sensitivity on PST Behavioral Posttest"
units(df$age) <- "years"
units(df$BMI) <- "kg/m^2"
units(df$TOTAL_KCAL) <- "kcal"
units(df$PORTIONS_SSB) <- "servings"
units(df$sweetstim_level) <- "grams of sugar per 300mL"
units(df$bitterstim_level) <- "mg of quinine per 300mL"
my.render.cont <- function(x) {
with(stats.apply.rounding(stats.default(x), digits=2), c("",
"Mean (SD)"=sprintf("%s (&plusmn; %s)", MEAN, SD)))
}
my.render.cat <- function(x) {
c("", sapply(stats.default(x), function(y) with(y,
sprintf("%d (%0.0f %%)", FREQ, PCT))))
}
table1(~ BMI  + age + sex + DRES + external_eating + emotional_eating + TOTAL_KCAL + PORTIONS_SSB + nback_accuracy +
sweetstim_level + sweetstim_pleasent + bitterstim_level + bitterstim_pleasent + PSTtraining_._correct
+ test_result_group | DREScat, data=df, render.continuous=my.render.cont, render.categorical=my.render.cat)
t.test(BMI ~ DREScat, data = df)
t.test(age ~ DREScat, data = df)
chisq.test(df$DREScat, df$sex, correct=FALSE)
t.test(DRES ~ DREScat, data = df)
t.test(external_eating ~ DREScat, data = df)
t.test(emotional_eating ~ DREScat, data = df)
t.test(TOTAL_KCAL ~ DREScat, data = df)
t.test(PORTIONS_SSB ~ DREScat, data = df)
t.test(nback_accuracy ~ DREScat, data = df)
chisq.test(df$sweetstim_level, df$DREScat, correct=FALSE)
t.test(sweetstim_pleasent ~ DREScat, data = df)
chisq.test(df$bitterstim_level, df$DREScat, correct=FALSE)
t.test(bitterstim_pleasent ~ DREScat, data = df)
t.test(PSTtraining_._correct ~ DREScat, data = df)
chisq.test(df$DREScat, df$test_result_group, correct=FALSE)
p <- ggplot(df, aes(x=reorder(DREScat,BMI, FUN = median), y=BMI, fill=DREScat))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) + xlab("Dietary Restraint Groups") +
ylab("Body Mass Index") + scale_fill_grey() + theme_classic()
p <- ggplot(df, aes(x=reorder(DREScat,BMI, FUN = median), y=BMI, fill=DREScat))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) + xlab("Dietary Restraint Groups") +
ylab("Body Mass Index") + scale_fill_manual(values=c("grey99", "grey60") + theme_classic()
p <- ggplot(df, aes(x=reorder(DREScat,BMI, FUN = median), y=BMI, fill=DREScat))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) + xlab("Dietary Restraint Groups") +
ylab("Body Mass Index") + theme_bw(base_size = 14) + scale_fill_grey() + theme_classic()
p <- ggplot(df, aes(x=reorder(DREScat,BMI, FUN = median), y=BMI))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) + xlab("Dietary Restraint Groups") +
ylab("Body Mass Index") + theme_bw(base_size = 14) + theme_classic()
p <- ggplot(df, aes(x=reorder(DREScat,nback_accuracy, FUN = median), y=BMI))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) + xlab("Dietary Restraint Groups") +
ylab("N-Back Accuracy") + theme_bw(base_size = 14) + theme_classic()
p <- ggplot(df, aes(x=reorder(DREScat, nback_accuracy, FUN = median), y=nback_accuracy))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) + xlab("Dietary Restraint Groups") +
ylab("N-Back Accuracy") + theme_bw(base_size = 14) + theme_classic()
p <- ggplot(df, aes(x=DREScat, y=nback_accuracy))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) + xlab("Dietary Restraint Groups") +
ylab("N-Back Accuracy") + theme_bw(base_size = 14) + theme_classic()
data %>%
mutate(DREScat = fct_relevel(DREScat, "low_restraint", "high_restraint")) %>%
p <- ggplot(df, aes(x=DREScat, y=nback_accuracy))
df %>%
mutate(DREScat = fct_relevel(DREScat, "low_restraint", "high_restraint")) %>%
p <- ggplot(df, aes(x=DREScat, y=nback_accuracy))
p <- ggplot(df, aes(x=reorder(DREScat,nback_accuracy, FUN = median), y=nback_accuracy))
p + geom_boxplot(outlier.shape = NA) + geom_jitter(width = 0.2) + xlab("Dietary Restraint Groups") +
ylab("N-Back Accuracy") + theme_bw(base_size = 14) + theme_classic()
DRES_Palette) <- c("#f6daff", "#c5f0ff")
DRES_Palette <- c("#f6daff", "#c5f0ff")
tbl_learner <- with(df, table(test_result_group, DREScat))
ggplot(as.data.frame(tbl_learner), aes(factor(test_result_group), Freq, fill = DREScat))
geom_col(position = "dodge", colour="black") + theme_minimal() + scale_fill_manual(values=c(DRES_Palette), name = "Dietary Restraint Groups", labels = c("Low", "High")) +
labs(y = "Number of Participants", x = "PST Posttest Performance") + ylim(0,13)
DRES_Palette <- c("#f6daff", "#c5f0ff")
tbl_learner <- with(df, table(test_result_group, DREScat))
ggplot(as.data.frame(tbl_learner), aes(factor(test_result_group), Freq, fill = DREScat)) +
geom_col(position = "dodge", colour="black") + theme_minimal() + scale_fill_manual(values=c(DRES_Palette), name = "Dietary Restraint Groups", labels = c("Low", "High")) +
labs(y = "Number of Participants", x = "PST Posttest Performance") + ylim(0,13)
DRES_Palette <- c("grey99", "grey60")
tbl_learner <- with(df, table(test_result_group, DREScat))
ggplot(as.data.frame(tbl_learner), aes(factor(test_result_group), Freq, fill = DREScat)) +
geom_col(position = "dodge", colour="black") + theme_minimal() + scale_fill_manual(values=c(DRES_Palette), name = "Dietary Restraint Groups", labels = c("Low", "High")) +
labs(y = "Number of Participants", x = "PST Posttest Performance") + ylim(0,13)
tbl_sweet <- with(df, table(sweetstim_level, DREScat))
ggplot(as.data.frame(tbl_sweet), aes(factor(sweetstim_level), Freq, fill = DREScat)) +
geom_col(position = "dodge", colour="black") + theme_minimal() + scale_fill_manual(values=c(DRES_Palette), name = "Dietary Restraint Groups", labels = c("Low", "High")) +
labs(y = "Number of Participants", x = "Sweetness Selected as Reward (g sugar/300mL") + ylim(0,13)
View(df)
View(df)
tbl_sweet <- with(df, table(sweetstim_level, DREScat))
ggplot(as.data.frame(tbl_sweet), aes(factor(sweetstim_level), Freq, fill = DREScat)) +
geom_col(position = "dodge", colour="black") + theme_minimal() +
scale_fill_manual(values=c(DRES_Palette), name = "Dietary Restraint Groups", labels = c("Low","High")) +
labs(y = "Number of Participants", x = "Sweetness Selected as Reward (g sugar/300mL")
df$DREScat <-
factor(df$DREScat, levels=c('low_restraint','high_restraint'),
labels=c("Low Dietary Restraint", "High Dietary Restratint"))
df$test_result_group <-
factor(df$test_result_group, levels=c('learner','nonlearner','punish_learner','reward_learner'),
labels=c("Choose Reward and Avoid Punishment", "No Learning", "Avoid Punishment",
"Choose Reward"))
df$sweetstim_level <-
factor(df$sweetstim_level, levels=c('1','2','3','4'),
labels=c("14", "21", "28",
"35"))
df$bitterstim_level <-
factor(df$bitterstim_level, levels=c('1','2','3','4'),
labels=c("12", "24", "48",
"72"))
label(df$sex) <- "Sex"
label(df$BMI) <- "Body Mass Index"
label(df$age) <- "Age"
label(df$DRES) <- "DEBQ: Restratint"
label(df$external_eating) <- "DEBQ: External Eating"
label(df$emotional_eating) <- "DEBQ: Emotional Eating"
label(df$PORTIONS_SSB) <- "Self-Reported Daily SSB Intake"
label(df$TOTAL_KCAL) <- "Self-Reported Daily Intake"
label(df$nback_accuracy) <- "N-Back Accuracy"
label(df$sweetstim_level) <- "Sweetness of Selected Reward"
label(df$sweetstim_pleasent) <- "Plesantness Rating of Selected Reward"
label(df$bitterstim_level) <- "Bitterness of Selected Punishment"
label(df$bitterstim_pleasent) <- "Plesantness Rating of Selected Punishment"
label(df$PSTtraining_._correct) <- "Accuracy during PST Training"
label(df$test_result_group) <- "Reinforcer Sensitivity on PST Behavioral Posttest"
units(df$age) <- "years"
units(df$BMI) <- "kg/m^2"
units(df$TOTAL_KCAL) <- "kcal"
units(df$PORTIONS_SSB) <- "servings"
units(df$sweetstim_level) <- "grams of sugar per 300mL"
units(df$bitterstim_level) <- "mg of quinine per 300mL"
my.render.cont <- function(x) {
with(stats.apply.rounding(stats.default(x), digits=2), c("",
"Mean (SD)"=sprintf("%s (&plusmn; %s)", MEAN, SD)))
}
my.render.cat <- function(x) {
c("", sapply(stats.default(x), function(y) with(y,
sprintf("%d (%0.0f %%)", FREQ, PCT))))
}
df$DREScat <-
factor(df$DREScat, levels=c('low_restraint','high_restraint'),
labels=c("Low Dietary Restraint", "High Dietary Restratint"))
df$test_result_group <-
factor(df$test_result_group, levels=c('learner','nonlearner','punish_learner','reward_learner'),
labels=c("Choose Reward and Avoid Punishment", "No Learning", "Avoid Punishment",
"Choose Reward"))
df$sweetstim_level <-
factor(df$sweetstim_level, levels=c('1','2','3','4'),
labels=c("14", "21", "28",
"35"))
df$bitterstim_level <-
factor(df$bitterstim_level, levels=c('1','2','3','4'),
labels=c("12", "24", "48",
"72"))
label(df$sex) <- "Sex"
label(df$BMI) <- "Body Mass Index"
label(df$age) <- "Age"
label(df$DRES) <- "DEBQ: Restratint"
label(df$external_eating) <- "DEBQ: External Eating"
label(df$emotional_eating) <- "DEBQ: Emotional Eating"
label(df$PORTIONS_SSB) <- "Self-Reported Daily SSB Intake"
label(df$TOTAL_KCAL) <- "Self-Reported Daily Intake"
label(df$nback_accuracy) <- "N-Back Accuracy"
label(df$sweetstim_level) <- "Sweetness of Selected Reward"
label(df$sweetstim_pleasent) <- "Plesantness Rating of Selected Reward"
label(df$bitterstim_level) <- "Bitterness of Selected Punishment"
label(df$bitterstim_pleasent) <- "Plesantness Rating of Selected Punishment"
label(df$PSTtraining_._correct) <- "Accuracy during PST Training"
label(df$test_result_group) <- "Reinforcer Sensitivity on PST Behavioral Posttest"
units(df$age) <- "years"
units(df$BMI) <- "kg/m^2"
units(df$TOTAL_KCAL) <- "kcal"
units(df$PORTIONS_SSB) <- "servings"
units(df$sweetstim_level) <- "grams of sugar per 300mL"
units(df$bitterstim_level) <- "mg of quinine per 300mL"
my.render.cont <- function(x) {
with(stats.apply.rounding(stats.default(x), digits=2), c("",
"Mean (SD)"=sprintf("%s (&plusmn; %s)", MEAN, SD)))
}
my.render.cat <- function(x) {
c("", sapply(stats.default(x), function(y) with(y,
sprintf("%d (%0.0f %%)", FREQ, PCT))))
}
table1(~ BMI  + age + sex + DRES + external_eating + emotional_eating + TOTAL_KCAL + PORTIONS_SSB + nback_accuracy +
sweetstim_level + sweetstim_pleasent + bitterstim_level + bitterstim_pleasent + PSTtraining_._correct
+ test_result_group | DREScat, data=df, render.continuous=my.render.cont, render.categorical=my.render.cat)
t.test(BMI ~ DREScat, data = df)
